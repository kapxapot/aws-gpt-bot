import { CouponCode } from "../../entities/coupon";
import { intervalWords } from "../../entities/interval";
import { toText } from "../../lib/common";
import { commands } from "../../lib/constants";
import { issueCoupon, getCouponTemplateByCode } from "../../services/couponService";
import { getCaseForNumber } from "../../services/grammarService";
import { putMetric } from "../../services/metricService";
import { formatProductName, getProductByCode } from "../../services/productService";
import { getUserById } from "../../services/userService";
import { sendTelegramMessage } from "../../telegram/bot";

type CouponPayload = {
  apiKey: string;
  userId: string;
  code: CouponCode;
};

const config = {
  apiKey: process.env.API_KEY
};

export async function couponHandler(payload: CouponPayload) {
  if (!config.apiKey) {
    throw new Error("API key is not configured.");
  }

  const { apiKey, userId, code } = payload;

  if (!apiKey) {
    throw new Error("Empty `apiKey`. A string is expected.");
  }

  if (apiKey !== config.apiKey) {
    throw new Error("Invalid `apiKey`.");
  }

  if (!userId) {
    throw new Error("`userId` is required.");
  }

  const user = await getUserById(userId);

  if (!user) {
    throw new Error(`User ${userId} not found.`);
  }

  if (!code) {
    throw new Error("`code` is required.");
  }

  const template = getCouponTemplateByCode(code);

  if (!template) {
    throw new Error(`Unknown coupon code: ${code} (template not found).`);
  }

  const coupon = await issueCoupon(user, template);

  await putMetric("CouponIssued");

  const product = getProductByCode(coupon.productCode);
  const { range, unit } = coupon.term;
  const word = intervalWords[unit];

  await sendTelegramMessage(
    user,
    toText(
      `üéâ –í—ã –ø–æ–ª—É—á–∏–ª–∏ –∫—É–ø–æ–Ω –Ω–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏—é ${formatProductName(product, "Genitive")}.`,
      `–í–Ω–∏–º–∞–Ω–∏–µ! –°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è –∫—É–ø–æ–Ω–∞ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω, –µ–≥–æ –Ω—É–∂–Ω–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –≤ —Ç–µ—á–µ–Ω–∏–µ <b>${range} ${getCaseForNumber(word, range, "Genitive")}</b>.`,
      `–î–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –∫—É–ø–æ–Ω–∞ –ø–µ—Ä–µ–π–¥–∏—Ç–µ –≤ —Ä–∞–∑–¥–µ–ª /${commands.coupons}`
    )
  );
}
