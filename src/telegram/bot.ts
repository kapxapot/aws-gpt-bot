import { Scenes, Telegraf, session } from "telegraf";
import { message } from "telegraf/filters";
import { TelegramRequest } from "../entities/telegramRequest";
import { isDebugMode } from "../lib/common";
import { parseCommandWithArgs, reply, userName } from "../lib/telegram";
import { getOrAddUser } from "../services/userService";
import { sessionStore } from "./session";
import { tutorialScene } from "./scenes/tutorialScene";
import { BotContext } from "./botContext";
import { commands } from "../lib/constants";
import { getCommandHandlers, kickHandler } from "./handlers";
import { premiumScene } from "./scenes/premiumScene";
import { User } from "../entities/user";
import { inspect } from "util";
import { sendMessageToGpt, showStatus } from "../services/messageService";
import { modeScene } from "./scenes/modeScene";
import { getUsersCount, updateUser } from "../storage/userStorage";
import { putMetric } from "../services/metricService";

const config = {
  botToken: process.env.BOT_TOKEN!,
  timeout: parseInt(process.env.TELEGRAF_TIMEOUT ?? "0") * 1000
};

function getBot() {
  return new Telegraf<BotContext>(
    config.botToken,
    {
      handlerTimeout: config.timeout
    }
  );
}

export function processTelegramRequest(tgRequest: TelegramRequest) {
  const bot = getBot();

  bot.use(session({
    store: sessionStore()
  }));

  const stage = new Scenes.Stage<BotContext>([tutorialScene, premiumScene, modeScene]);

  bot.use(stage.middleware());

  bot.start(async ctx => {
    const user = await getOrAddUser(ctx.from);
    const newUser = !user.context;

    if (newUser) {
      const { args } = parseCommandWithArgs(ctx.message.text);

      if (args.length) {
        await updateUser(user, { source: args[0] });
      }

      await reply(
        ctx,
        `–ü—Ä–∏–≤–µ—Ç, <b>${userName(ctx.from)}</b>! ü§ñ –Ø ‚Äî <b>GPToid</b>, –±–æ—Ç, —Å–æ–∑–¥–∞–Ω–Ω—ã–π –ø–æ–º–æ–≥–∞—Ç—å –≤–∞–º –≤ —Ä–∞–±–æ—Ç–µ —Å <b>ChatGPT</b>!`,
        "–ó–¥–æ—Ä–æ–≤–æ, —á—Ç–æ –≤—ã –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª–∏—Å—å –∫ –Ω–∞–º! üéâ",
        `–Ø –ø–æ–¥–≥–æ—Ç–æ–≤–∏–ª –¥–ª—è –≤–∞—Å –æ–±—É—á–µ–Ω–∏–µ /${commands.tutorial}, —á—Ç–æ–±—ã –≤—ã –±—ã—Å—Ç—Ä–µ–µ –Ω–∞—É—á–∏–ª–∏—Å—å –¥–µ–ª–∞—Ç—å –ø–µ—Ä–≤—ã–µ —à–∞–≥–∏ —Å ChatGPT –∏ —É–∑–Ω–∞–ª–∏ –∫–∞–∫ –æ–Ω —Ä–∞–±–æ—Ç–∞–µ—Ç.`,
        `–£ –º–µ–Ω—è –µ—Å—Ç—å —Ä–∞–∑–Ω—ã–µ —Ä–µ–∂–∏–º—ã —Ä–∞–±–æ—Ç—ã /${commands.mode} ‚Äî –≤—ã–±–∏—Ä–∞–π—Ç–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–π –ø–æ–¥ –Ω—É–∂–Ω—É—é –≤–∞–º –∑–∞–¥–∞—á—É.`,
        `–¢–∞–∫–∂–µ –≤—ã –º–æ–∂–µ—Ç–µ –æ—Ñ–æ—Ä–º–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É /${commands.premium} –¥–ª—è —É–≤–µ–ª–∏—á–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤.`,
        `–ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã –∏–ª–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è, –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å –∫ –∫–æ–º–∞–Ω–¥–µ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ /${commands.support}, –≤–∞–º –±—É–¥—É—Ç —Ä–∞–¥—ã –æ—Ç–≤–µ—Ç–∏—Ç—å!`,
        `–£—Å–ª–æ–≤–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ —Å–æ–≥–ª–∞—à–µ–Ω–∏—è: /${commands.terms}`
      );

      await putMetric("UserRegistered", 1);
      await putMetric("UsersTotal", await getUsersCount());
    } else {
      await reply(
        ctx,
        `–° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º, <b>${userName(ctx.from)}</b>! –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –æ–±—â–µ–Ω–∏–µ —Å <b>ChatGPT</b>. üí´`
      );

      await showStatus(ctx, user);
    }
  });

  getCommandHandlers().forEach(tuple => bot.command(...tuple));

  bot.on(message("text"), async ctx => {
    const user = await getOrAddUser(ctx.from);

    await sendMessageToGpt(ctx, user, ctx.message.text, tgRequest.createdAt);
  });

  bot.use(kickHandler);

  bot.catch(async (err, ctx) => {
    console.log(`Bot error (${ctx.updateType}).`, err);

    if (ctx.from) {
      const user = await getOrAddUser(ctx.from);

      if (isDebugMode(user)) {
        await reply(
          ctx,
          "–û—à–∏–±–∫–∞:",
          inspect(err)
        )
      }
     }
  });

  bot.handleUpdate(tgRequest.request);
}

export async function sendTelegramMessage(user: User, message: string) {
  const bot = getBot();

  await bot.telegram.sendMessage(
    user.telegramId,
    message,
    {
      parse_mode: "HTML"
    }
  );
}
