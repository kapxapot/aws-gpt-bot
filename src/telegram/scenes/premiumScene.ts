import { BaseScene } from "telegraf/scenes";
import { BotContext } from "../botContext";
import { commands, messages, scenes } from "../../lib/constants";
import { addOtherCommandHandlers, dunnoHandler, kickHandler } from "../handlers";
import { clearInlineKeyboard, inlineKeyboard, reply, replyWithKeyboard } from "../../lib/telegram";
import { PaymentEvent } from "../../entities/payment";
import { getOrAddUser } from "../../services/userService";
import { storePayment } from "../../storage/paymentStorage";
import { yooMoneyPayment } from "../../external/yooMoneyPayment";
import { now } from "../../entities/at";
import { Product, getProductDisplayName, isPurchasedProduct, monthlyPremiumSubscription, monthlyUnlimitedSubscription } from "../../entities/product";
import { isError } from "../../lib/error";
import { formatUserSubscription, getCurrentSubscription, getUserPlanSettings } from "../../services/planService";
import { PlanSettings, getPlanSettings } from "../../entities/plan";
import { getMessageLimitDisplayInfo } from "../../services/messageLimitService";
import { canMakePurchases } from "../../services/permissionService";

const scene = new BaseScene<BotContext>(scenes.premium);

const buyPremiumAction = "buy-premium";
const buyUnlimitedAction = "buy-unlimited";
const cancelAction = "cancel";

scene.enter(async (ctx) => {
  if (!ctx.from) {
    await ctx.scene.leave();
    return;
  }

  const user = await getOrAddUser(ctx.from);

  const userPlanSettings = getUserPlanSettings(user);
  const premiumSettings = getPlanSettings("premium");
  const unlimitedSettings = getPlanSettings("unlimited");

  const getLimitText = (planSettings: PlanSettings) => {
    const limit = planSettings.text.dailyMessageLimit;
    const displayInfo = getMessageLimitDisplayInfo(limit);

    return displayInfo.long;
  }

  const planMessages = [
    `–¢–µ–∫—É—â–∏–π —Ç–∞—Ä–∏—Ñ: ${formatUserSubscription(user)}:
‚óΩ –º–æ–¥–µ–ª—å <b>${userPlanSettings.text.model}</b>
‚óΩ ${getLimitText(userPlanSettings)}`,

    "–ï—Å–ª–∏ –≤–∞–º –Ω—É–∂–Ω–æ –±–æ–ª—å—à–µ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ <b>ChatGPT</b> –∏–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Ä–∞–±–æ—Ç–∞—Ç—å —Å <b>GPT-4</b>, –æ—Ñ–æ—Ä–º–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ –æ–¥–∏–Ω –∏–∑ –ø–ª–∞—Ç–Ω—ã—Ö —Ç–∞—Ä–∏—Ñ–æ–≤:",

    `üíö –¢–∞—Ä–∏—Ñ <b>¬´–ü—Ä–µ–º–∏—É–º¬ª</b>:
‚óΩ –º–æ–¥–µ–ª—å <b>${premiumSettings.text.model}</b>
‚óΩ ${getLimitText(premiumSettings)}
‚óΩ 290 —Ä—É–±–ª–µ–π –Ω–∞ 30 –¥–Ω–µ–π`,

    `üíõ –¢–∞—Ä–∏—Ñ <b>¬´–ë–µ–∑–ª–∏–º–∏—Ç¬ª</b>:
‚óΩ –º–æ–¥–µ–ª—å <b>${unlimitedSettings.text.model}</b>
‚óΩ ${getLimitText(unlimitedSettings)}
‚óΩ 390 —Ä—É–±–ª–µ–π –Ω–∞ 30 –¥–Ω–µ–π`,
  ];

  const buttons: string[][] = [];

  if (!canMakePurchases(user)) {
    planMessages.push("‚õî –ü–æ–∫—É–ø–∫–∞ —Ç–∞—Ä–∏—Ñ–æ–≤ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.");

    await reply(ctx, ...planMessages, messages.backToDialog);
    await ctx.scene.leave();
    return;
  }

  const subscription = getCurrentSubscription(user);

  if (isPurchasedProduct(subscription)) {
    if (subscription.code === "subscription-premium-30-days") {
      buttons.push(
        ["–ö—É–ø–∏—Ç—å –ë–µ–∑–ª–∏–º–∏—Ç", buyUnlimitedAction]
      );

      planMessages.push("‚ö† –í–∞—à —Ç–µ–∫—É—â–∏–π —Ç–∞—Ä–∏—Ñ <b>¬´–ü—Ä–µ–º–∏—É–º¬ª</b>. –í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ <b>¬´–ë–µ–∑–ª–∏–º–∏—Ç¬ª</b>, –∫–æ—Ç–æ—Ä—ã–π –∑–∞–º–µ–Ω–∏—Ç —Ç–µ–∫—É—â–∏–π —Ç–∞—Ä–∏—Ñ <b>–±–µ–∑ –∫–æ–º–ø–µ–Ω—Å–∞—Ü–∏–∏ —Å—Ä–µ–¥—Å—Ç–≤</b>.");
    } else if (subscription.code === "subscription-unlimited-30-days") {
      planMessages.push("‚ö† –í–∞—à —Ç–µ–∫—É—â–∏–π —Ç–∞—Ä–∏—Ñ <b>¬´–ë–µ–∑–ª–∏–º–∏—Ç¬ª</b>. –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ –¥—Ä—É–≥–∏–µ —Ç–∞—Ä–∏—Ñ—ã, –ø–æ–∫–∞ —É –≤–∞—Å –Ω–µ –∑–∞–∫–æ–Ω—á–∏—Ç—Å—è —Ç–µ–∫—É—â–∏–π.");
    }
  } else {
    buttons.push(
      ["–ö—É–ø–∏—Ç—å –ü—Ä–µ–º–∏—É–º", buyPremiumAction],
      ["–ö—É–ø–∏—Ç—å –ë–µ–∑–ª–∏–º–∏—Ç", buyUnlimitedAction]
    );
  }

  await replyWithKeyboard(
    ctx,
    inlineKeyboard(...buttons, ["–û—Ç–º–µ–Ω–∞", cancelAction]),
    ...planMessages
  );
});

addOtherCommandHandlers(scene, commands.premium);

scene.action(buyPremiumAction, async (ctx) => {
  const product = monthlyPremiumSubscription();
  await buyProduct(ctx, product);
});

scene.action(buyUnlimitedAction, async (ctx) => {
  const product = monthlyUnlimitedSubscription();
  await buyProduct(ctx, product);
});

async function buyProduct(ctx: BotContext, product: Product) {
  await clearInlineKeyboard(ctx);

  if (!ctx.from) {
    await ctx.scene.leave();
    return;
  }

  const requestData = {
    total: product.price,
    description: product.name
  };

  const response = await yooMoneyPayment(requestData);

  if (isError(response)) {
    await reply(
      ctx,
      "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –æ–ø–ª–∞—Ç–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞. –ü—Ä–∏–Ω–æ—Å–∏–º –∏–∑–≤–∏–Ω–µ–Ω–∏—è.",
      messages.backToDialog
    );

    await ctx.scene.leave();

    return;
  }

  const data = response.data;

  const event: PaymentEvent = {
    type: "created",
    details: data,
    at: now()
  };

  const paymentId = data.id;
  const paymentUrl = data.confirmation.confirmation_url;

  const user = await getOrAddUser(ctx.from);

  await storePayment({
    id: paymentId,
    userId: user.id,
    type: "YooMoney",
    cart: [product],
    status: data.status,
    total: requestData.total,
    description: requestData.description,
    url: paymentUrl,
    requestData: requestData,
    responseData: data,
    events: [event]
  });

  await reply(
    ctx,
    `–î–ª—è –æ–ø–ª–∞—Ç—ã <b>${getProductDisplayName(product, "Gen")}</b> –ø—Ä–æ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ: ${paymentUrl}`,
    `‚ö† –í—Ä–µ–º—è –¥–µ–π—Å—Ç–≤–∏—è —Å—Å—ã–ª–∫–∏ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–æ. –ï—Å–ª–∏ –≤—ã –Ω–µ –ø—Ä–æ–∏–∑–≤–µ–¥–µ—Ç–µ –æ–ø–ª–∞—Ç—É –≤–æ–≤—Ä–µ–º—è, –ø–æ–ª—É—á–∏—Ç–µ –Ω–æ–≤—É—é —Å—Å—ã–ª–∫—É —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /${commands.premium}`,
    "–ú—ã —Å–æ–æ–±—â–∏–º –≤–∞–º, –∫–æ–≥–¥–∞ –ø–æ–ª—É—á–∏–º –æ–ø–ª–∞—Ç—É.",
    messages.backToDialog
  );

  await ctx.scene.leave();
}

scene.action(cancelAction, async (ctx) => {
  await clearInlineKeyboard(ctx);
  await ctx.scene.leave();
  await reply(ctx, messages.backToDialog);
});

scene.use(kickHandler);
scene.use(dunnoHandler);

export const premiumScene = scene;
