import { Markup } from "telegraf";
import { BaseScene } from "telegraf/scenes";
import { message } from "telegraf/filters";
import { BotContext } from "../context";
import { commands, messages, scenes } from "../../lib/constants";
import { toText } from "../../lib/common";
import { clearInlineKeyboard, dunno, sliceButtons } from "../../lib/telegram";
import { backToCustomPrompt, getOrAddUser, newCustomPrompt, setPrompt } from "../../services/userService";
import { getPromptByCode, getPrompts } from "../../entities/prompt";
import { getOtherCommandHandlers, kickHandler } from "../handlers";

export const promptScene = getPromptScene(scenes.prompt, true);
export const strictPromptScene = getPromptScene(scenes.strictPrompt, false);

function getPromptScene(name: string, allowCancel: boolean) {
  var scene = new BaseScene<BotContext>(name);

  const customPromptAction = "custom-prompt";
  const backToCustomPromptAction = "back-to-custom-prompt";
  const promptSelectionAction = "select-prompt";
  const cancelAction = "cancel";

  const customPromptInputStage = "customPromptInput";
  const promptSelectionStage = "promptSelection";

  scene.enter(async ctx => {
    ctx.session.promptData = {};

    if (!ctx.from) {
      ctx.scene.leave();
      return;
    }

    const user = await getOrAddUser(ctx.from);

    const messages = [];
    let customPromptMode = true;
    let roleMode = false;

    let hasCustomPrompt = false;

    if (user.context) {
      const customPrompt = user.context.customPrompt;
      hasCustomPrompt = !!customPrompt;

      const promptCode = user.context.promptCode;
      const prompt = getPromptByCode(promptCode);

      if (prompt) {
        customPromptMode = false;
        roleMode = true;

        messages.push(`–¢–µ–∫—É—â–∞—è —Ä–æ–ª—å: <b>¬´${prompt.name}¬ª</b>`);
      }

      if (hasCustomPrompt) {
        messages.push(
          prompt ? "–¢–∞–∫–∂–µ —É –≤–∞—Å –µ—Å—Ç—å —Å–≤–æ–π –ø—Ä–æ–º—Ç:" : "–¢–µ–∫—É—â–∏–π –ø—Ä–æ–º—Ç:",
          `<i>${customPrompt}</i>`
        );
      }
    }

    if (customPromptMode) {
      messages.push(
        hasCustomPrompt
          ? "–í—ã –º–æ–∂–µ—Ç–µ –ø–æ–º–µ–Ω—è—Ç—å –ø—Ä–æ–º—Ç –∏–ª–∏ –≤—ã–±—Ä–∞—Ç—å –ø—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—É—é —Ä–æ–ª—å. üëá"
          : "–í—ã –º–æ–∂–µ—Ç–µ –∑–∞–¥–∞—Ç—å —Å–≤–æ–π –ø—Ä–æ–º—Ç –∏–ª–∏ –≤—ã–±—Ä–∞—Ç—å –ø—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—É—é —Ä–æ–ª—å. üëá"
      );
    } else {
      messages.push(
        hasCustomPrompt
          ? "–í—ã –º–æ–∂–µ—Ç–µ –≤–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Å–≤–æ–µ–º—É –ø—Ä–æ–º—Ç—É, –∑–∞–¥–∞—Ç—å –¥—Ä—É–≥–æ–π –ø—Ä–æ–º—Ç –∏–ª–∏ –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥—É—é —Ä–æ–ª—å. üëá"
          : "–í—ã –º–æ–∂–µ—Ç–µ –∑–∞–¥–∞—Ç—å —Å–≤–æ–π –ø—Ä–æ–º—Ç –∏–ª–∏ –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥—É—é —Ä–æ–ª—å. üëá"
      );
    }

    messages.push(`–ï—Å–ª–∏ –≤—ã –∑–∞—Ç—Ä—É–¥–Ω—è–µ—Ç–µ—Å—å –≤ –≤—ã–±–æ—Ä–µ, —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º –ø—Ä–æ–π—Ç–∏ –æ–±—É—á–µ–Ω–∏–µ: /${commands.tutorial}`);

    // to do: –µ—Å–ª–∏ –≤—ã–±—Ä–∞–Ω–∞ —Ä–æ–ª—å, –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –≤–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Å–≤–æ–µ–º—É –ø—Ä–æ–º—Ç—É –∏–ª–∏ –≤–≤–µ—Å—Ç–∏ –Ω–æ–≤—ã–π

    const buttons = [];

    if (customPromptMode) {
      buttons.push(
        Markup.button.callback(
          hasCustomPrompt ? "–ü–æ–º–µ–Ω—è—Ç—å –ø—Ä–æ–º—Ç" : "–ó–∞–¥–∞—Ç—å –ø—Ä–æ–º—Ç",
          customPromptAction
        )
      );
    } else {
      if (hasCustomPrompt) {
        buttons.push(
          Markup.button.callback("–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –ø—Ä–æ–º—Ç—É", backToCustomPromptAction)
        );
      }

      buttons.push(
        Markup.button.callback("–ó–∞–¥–∞—Ç—å –ø—Ä–æ–º—Ç", customPromptAction)
      );
    }

    buttons.push(
      Markup.button.callback("–í—ã–±—Ä–∞—Ç—å —Ä–æ–ª—å", promptSelectionAction)
    );

    if (allowCancel) {
      buttons.push(
        Markup.button.callback("–û—Ç–º–µ–Ω–∞", cancelAction)
      );
    }

    ctx.replyWithHTML(
      toText(messages),
      Markup.inlineKeyboard(sliceButtons(buttons))
    );
  });

  getOtherCommandHandlers(commands.prompt).forEach(tuple => {
    scene.command(tuple[0], ctx => {
      clearInlineKeyboard(ctx);
      ctx.scene.leave();

      return tuple[1](ctx);
    });
  });

  scene.action(cancelAction, ctx => {
    clearInlineKeyboard(ctx);
    ctx.reply(messages.backToAI);

    return ctx.scene.leave();
  });

  scene.action(customPromptAction, ctx => {
    clearInlineKeyboard(ctx);

    ctx.session.promptData = {
      stage: customPromptInputStage
    };

    ctx.reply("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –ø—Ä–æ–º—Ç:");
  });

  scene.action(promptSelectionAction, ctx => {
    clearInlineKeyboard(ctx);

    ctx.session.promptData = {
      stage: promptSelectionStage
    };

    const buttons = getPrompts()
      .map(p => Markup.button.callback(p.name, p.code));

    ctx.reply(
      "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–æ–ª—å:",
      Markup.inlineKeyboard(
        sliceButtons(buttons)
      )
    );
  });

  getPrompts().forEach(prompt => {
    scene.action(prompt.code, async ctx => {
      clearInlineKeyboard(ctx);

      const promptData = ctx.session.promptData;

      if (promptData.stage === promptSelectionStage && ctx.from) {
        // set prompt
        const user = await getOrAddUser(ctx.from);
        await setPrompt(user, prompt);

        ctx.replyWithHTML(`–í—ã –≤—ã–±—Ä–∞–ª–∏ —Ä–æ–ª—å <b>¬´${prompt.name}¬ª</b>. ${messages.backToAI}`);

        return ctx.scene.leave();
      }

      dunno(ctx);
    });
  });

  scene.action(backToCustomPromptAction, async ctx => {
    clearInlineKeyboard(ctx);

    if (ctx.from) {
      // switch to old custom prompt
      const user = await getOrAddUser(ctx.from);
      await backToCustomPrompt(user);

      ctx.reply(`–í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –≤–∞—à–µ–º—É –ø—Ä–æ–º—Ç—É. ${messages.backToAI}`);

      return ctx.scene.leave();
    }

    dunno(ctx);
  });

  scene.on(message("text"), async ctx => {
    const promptData = ctx.session.promptData;

    if (promptData.stage === customPromptInputStage) {
      // switch to new custom prompt
      const customPrompt = ctx.message.text;

      const user = await getOrAddUser(ctx.from);
      await newCustomPrompt(user, customPrompt);

      ctx.reply(`–í–∞—à –Ω–æ–≤—ã–π –ø—Ä–æ–º—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω. ${messages.backToAI}`);

      return ctx.scene.leave();
    }

    dunno(ctx);
  });

  scene.use(ctx => {
    kickHandler(ctx);
    dunno(ctx);
  });

  return scene;
};
