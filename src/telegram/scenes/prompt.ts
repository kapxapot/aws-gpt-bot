import { BaseScene } from "telegraf/scenes";
import { message } from "telegraf/filters";
import { BotContext, PromptStage, SessionData } from "../context";
import { commands, messages, scenes } from "../../lib/constants";
import { toText } from "../../lib/common";
import { clearInlineKeyboard, inlineKeyboard, reply } from "../../lib/telegram";
import { backToCustomPrompt, getOrAddUser, newCustomPrompt, setPrompt } from "../../services/userService";
import { getPromptByCode, getPrompts } from "../../entities/prompt";
import { addOtherCommandHandlers, dunnoHandler, kickHandler } from "../handlers";

const scene = new BaseScene<BotContext>(scenes.prompt);

const customPromptAction = "custom-prompt";
const backToCustomPromptAction = "back-to-custom-prompt";
const promptSelectionAction = "select-prompt";
const cancelAction = "cancel";

const cancelButton = ["–û—Ç–º–µ–Ω–∞", cancelAction];

scene.enter(startHandler);

async function startHandler(ctx: BotContext) {
  setStage(ctx.session, "start");

  if (!ctx.from) {
    await ctx.scene.leave();
    return;
  }

  const user = await getOrAddUser(ctx.from);

  const messages = [];
  let customPromptMode = true;
  let roleMode = false;

  let hasCustomPrompt = false;

  if (user.context) {
    const customPrompt = user.context.customPrompt;
    hasCustomPrompt = !!customPrompt;

    const promptCode = user.context.promptCode;
    const prompt = getPromptByCode(promptCode);

    if (prompt) {
      customPromptMode = false;
      roleMode = true;

      messages.push(`–¢–µ–∫—É—â–∞—è —Ä–æ–ª—å: <b>¬´${prompt.name}¬ª</b>`);
    }

    if (hasCustomPrompt) {
      messages.push(
        prompt ? "–¢–∞–∫–∂–µ —É –≤–∞—Å –µ—Å—Ç—å —Å–≤–æ–π –ø—Ä–æ–º—Ç:" : "–¢–µ–∫—É—â–∏–π –ø—Ä–æ–º—Ç:",
        `<i>${customPrompt}</i>`
      );
    }
  }

  if (customPromptMode) {
    messages.push(`–í—ã –º–æ–∂–µ—Ç–µ ${hasCustomPrompt ? "–ø–æ–º–µ–Ω—è—Ç—å" : "–∑–∞–¥–∞—Ç—å"} —Å–≤–æ–π –ø—Ä–æ–º—Ç –∏–ª–∏ –≤—ã–±—Ä–∞—Ç—å –ø—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—É—é —Ä–æ–ª—å. üëá`);
  } else if (roleMode) {
    messages.push(
      hasCustomPrompt
        ? "–í—ã –º–æ–∂–µ—Ç–µ –≤–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Å–≤–æ–µ–º—É –ø—Ä–æ–º—Ç—É, –∑–∞–¥–∞—Ç—å –Ω–æ–≤—ã–π –ø—Ä–æ–º—Ç –∏–ª–∏ –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥—É—é —Ä–æ–ª—å. üëá"
        : "–í—ã –º–æ–∂–µ—Ç–µ –∑–∞–¥–∞—Ç—å —Å–≤–æ–π –ø—Ä–æ–º—Ç –∏–ª–∏ –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥—É—é —Ä–æ–ª—å. üëá"
    );
  }

  messages.push(`–ï—Å–ª–∏ –≤—ã –∑–∞—Ç—Ä—É–¥–Ω—è–µ—Ç–µ—Å—å –≤ –≤—ã–±–æ—Ä–µ, —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º –ø—Ä–æ–π—Ç–∏ –æ–±—É—á–µ–Ω–∏–µ: /${commands.tutorial}`);

  const buttons = [];

  if (customPromptMode) {
    buttons.push([
      hasCustomPrompt ? "–ü–æ–º–µ–Ω—è—Ç—å —Å–≤–æ–π –ø—Ä–æ–º—Ç" : "–ó–∞–¥–∞—Ç—å —Å–≤–æ–π –ø—Ä–æ–º—Ç",
      customPromptAction
    ]);
  } else if (roleMode) {
    if (hasCustomPrompt) {
      buttons.push(["–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Å–≤–æ–µ–º—É –ø—Ä–æ–º—Ç—É", backToCustomPromptAction]);
    }

    buttons.push(["–ó–∞–¥–∞—Ç—å –Ω–æ–≤—ã–π –ø—Ä–æ–º—Ç", customPromptAction]);
  }

  buttons.push(
    ["–í—ã–±—Ä–∞—Ç—å —Ä–æ–ª—å", promptSelectionAction],
    cancelButton
  );

  await ctx.replyWithHTML(
    toText(...messages),
    inlineKeyboard(...buttons)
  );
}

addOtherCommandHandlers(scene, commands.prompt);

scene.action(cancelAction, async (ctx) => {
  await clearInlineKeyboard(ctx);

  if (isStage(ctx.session, "start")) {
    await ctx.reply(messages.backToAI);
    await ctx.scene.leave();
  } else {
    await startHandler(ctx);
  }
});

scene.action(customPromptAction, async (ctx) => {
  await clearInlineKeyboard(ctx);

  setStage(ctx.session, "customPromptInput");

  await ctx.reply(
    "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –ø—Ä–æ–º—Ç:",
    inlineKeyboard(cancelButton)
  );
});

scene.action(promptSelectionAction, async (ctx) => {
  await clearInlineKeyboard(ctx);

  setStage(ctx.session, "promptSelection");

  if (!ctx.from) {
    await ctx.scene.leave();
    return;
  }

  const user = await getOrAddUser(ctx.from);

  const promptCode = user.context?.promptCode;

  const buttons = getPrompts()
    .filter(p => p.code !== promptCode)
    .map(p => [p.name, p.code]);

  buttons.push(cancelButton);

  await ctx.reply(
    "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–æ–ª—å:",
    inlineKeyboard(...buttons)
  );
});

getPrompts().forEach(prompt => {
  scene.action(prompt.code, async (ctx) => {
    if (isStage(ctx.session, "promptSelection") && ctx.from) {
      await clearInlineKeyboard(ctx);

      // set prompt
      const user = await getOrAddUser(ctx.from);
      await setPrompt(user, prompt);

      await reply(
        ctx,
        `–í—ã –≤—ã–±—Ä–∞–ª–∏ —Ä–æ–ª—å <b>¬´${prompt.name}¬ª</b>.`,
        messages.backToAI
      );

      await ctx.scene.leave();

      return;
    }

    await dunnoHandler(ctx);
  });
});

scene.action(backToCustomPromptAction, async (ctx) => {
  if (ctx.from) {
    await clearInlineKeyboard(ctx);

    // switch to old custom prompt
    const user = await getOrAddUser(ctx.from);
    await backToCustomPrompt(user);

    await reply(
      ctx,
      "–í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –≤–∞—à–µ–º—É –ø—Ä–æ–º—Ç—É.",
      messages.backToAI
    );

    await ctx.scene.leave();

    return;
  }

  await dunnoHandler(ctx);
});

scene.on(message("text"), async (ctx) => {
  if (isStage(ctx.session, "customPromptInput")) {
    // switch to new custom prompt
    const customPrompt = ctx.message.text;

    const user = await getOrAddUser(ctx.from);
    await newCustomPrompt(user, customPrompt);

    await reply(
      ctx,
      "–í–∞—à –Ω–æ–≤—ã–π –ø—Ä–æ–º—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω.",
      messages.backToAI
    );

    await ctx.scene.leave();
  }
});

scene.use(async ctx => {
  await kickHandler(ctx);
  await dunnoHandler(ctx);
});

export const promptScene = scene;

function setStage(session: SessionData, stage: PromptStage) {
  session.promptData = { stage };
}

function isStage(session: SessionData, stage: PromptStage): boolean {
  return session.promptData?.stage === stage;
}
