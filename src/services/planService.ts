import { MoneyLike, overprice, toMoney } from "../entities/money";
import { Plan } from "../entities/plan";
import { Term, days } from "../entities/term";
import { StringLike, toCompactText } from "../lib/common";
import { bulletize } from "../lib/text";
import { gptokenString } from "./gptokenService";
import { formatWordNumber } from "./grammarService";
import { formatMoney } from "./moneyService";
import { getPlanSettings } from "./planSettingsService";
import { formatTerm } from "./termService";

export type DescriptionMode = "short" | "long";

export function isPlanActive(plan: Plan) {
  const planSettings = getPlanSettings(plan);
  return !planSettings.disabled;
}

export function getPlanDescription(plan: Plan, mode?: DescriptionMode): string {
  mode = mode || "short";

  const price = (money: MoneyLike, term?: Term) => {
    return (mode !== "short")
      ? `${formatMoney(toMoney(money))} –Ω–∞ ${formatTerm(term ?? days(30), "Accusative")}`
      : null;
  };

  const gptokenLines = (gptokens: number, money: MoneyLike, term?: Term) => [
    gptokenString(gptokens),
    price(money, term)
  ];

  switch (plan) {
    case "free":
      return buildDescription(
        "ü§ë",
        "–¢–∞—Ä–∏—Ñ ¬´–ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π¬ª",
        `${formatWordNumber("–∑–∞–ø—Ä–æ—Å", 5)} –≤ –¥–µ–Ω—å`,
        `${formatWordNumber("–∑–∞–ø—Ä–æ—Å", 100)} –≤ –º–µ—Å—è—Ü`,
        `${formatWordNumber("–∑–∞–ø—Ä–æ—Å", 3)} –∫ <b>DALL-E 3</b> –≤ –Ω–µ–¥–µ–ª—é`
      );

    case "premium":
      return buildDescription(
        "üíî",
        "–¢–∞—Ä–∏—Ñ ¬´–ü—Ä–µ–º–∏—É–º¬ª",
        `–¥–æ ${formatWordNumber("–∑–∞–ø—Ä–æ—Å", 100, "Genitive")} –≤ –¥–µ–Ω—å`,
        price(290)
      );

    case "unlimited":
      return buildDescription(
        "üíî",
        "–¢–∞—Ä–∏—Ñ ¬´–ë–µ–∑–ª–∏–º–∏—Ç¬ª",
        "–Ω–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø—Ä–æ—Å–æ–≤",
        price(390)
      );

    case "novice":
      return buildDescription(
        "üëß",
        "–ü–∞–∫–µ—Ç ¬´–ù–æ–≤–∏—á–æ–∫¬ª",
        formatWordNumber("–∑–∞–ø—Ä–æ—Å", 200),
        price(49)
      );

    case "student":
      return buildDescription(
        "üë®‚Äçüéì",
        "–ü–∞–∫–µ—Ç ¬´–°—Ç—É–¥–µ–Ω—Ç¬ª",
        formatWordNumber("–∑–∞–ø—Ä–æ—Å", 500),
        price(99)
      );

    case "promo":
      return buildDescription(
        "üé´",
        "–ü–∞–∫–µ—Ç ¬´–ü—Ä–æ–º–æ¬ª",
        ...gptokenLines(10, overprice)
      );

    case "trial":
      return buildDescription(
        "üß™",
        "–ü–∞–∫–µ—Ç ¬´–ü—Ä–æ–±–Ω—ã–π¬ª",
        ...gptokenLines(20, 99)
      );

    case "creative":
      return buildDescription(
        "üë©‚Äçüé®",
        "–ü–∞–∫–µ—Ç ¬´–¢–≤–æ—Ä—á–µ—Å–∫–∏–π¬ª",
        ...gptokenLines(50, 199)
      );

    case "pro":
      return buildDescription(
        "üòé",
        "–ü–∞–∫–µ—Ç ¬´–ü—Ä–æ—Ñ–∏¬ª",
        ...gptokenLines(150, 449)
      );

    case "boss":
      return buildDescription(
        "ü§¥",
        "–ü–∞–∫–µ—Ç ¬´–ë–æ—Å—Å¬ª",
        ...gptokenLines(400, 999)
      );

    case "test-tinygpt3":
      return buildDescription(
        "üõ†",
        "–¢–µ—Å—Ç–æ–≤—ã–π –ü–∞–∫–µ—Ç ¬´–ú–µ–ª–∫–∏–π GPT-3¬ª",
        formatWordNumber("–∑–∞–ø—Ä–æ—Å", 2),
        price(overprice, days(1))
      );

    case "test-tinygptokens":
      return buildDescription(
        "üõ†",
        "–¢–µ—Å—Ç–æ–≤—ã–π –ü–∞–∫–µ—Ç ¬´–ú–µ–ª–∫–∏–π Gptoken¬ª",
        ...gptokenLines(4, overprice, days(1))
      );
  }
}

const buildDescription = (icon: string, name: string, ...lines: StringLike[]) =>
  toCompactText(
    `${icon} <b>${name}</b>`,
    ...bulletize(...lines)
  );
