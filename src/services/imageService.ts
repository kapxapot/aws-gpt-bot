import { now } from "../entities/at";
import { User } from "../entities/user";
import { gptImageGeneration } from "../external/gptImageGeneration";
import { toText } from "../lib/common";
import { cancelButton } from "../lib/dialog";
import { isSuccess } from "../lib/error";
import { inlineKeyboard, reply, replyWithKeyboard } from "../lib/telegram";
import { storeImageRequest, updateImageRequest } from "../storage/imageRequestStorage";
import { AnyContext } from "../telegram/botContext";
import { putMetric } from "./metricService";
import { getUserPlanSettings, stopWaitingForGptImageGeneration, waitForGptImageGeneration } from "./userService";
import { PassThrough } from "stream";

export async function generateImageWithGpt(ctx: AnyContext, user: User, prompt: string): Promise<boolean> {
  const requestedAt = now();

  const messages = await reply(ctx, "üë®‚Äçüé® –†–∏—Å—É—é –≤–∞—à—É –∫–∞—Ä—Ç–∏–Ω–∫—É, –ø–æ–¥–æ–∂–¥–∏—Ç–µ... ‚è≥");

  const planSettings = getUserPlanSettings(user);

  let imageRequest = await storeImageRequest({
    userId: user.id,
    model: planSettings.images.model,
    size: planSettings.images.size,
    prompt,
    responseFormat: "url",
    requestedAt,
    strict: false
  });

  await waitForGptImageGeneration(user);
  const image = await gptImageGeneration(imageRequest);
  await stopWaitingForGptImageGeneration(user);

  await ctx.deleteMessage(messages[0].message_id);

  // this doesn't work for "b64_json" format
  imageRequest = await updateImageRequest(
    imageRequest,
    {
      response: image,
      respondedAt: now()
    }
  );

  if (isSuccess(image)) {
    await reply(
      ctx,
      `üñº –í–∞—à–∞ –∫–∞—Ä—Ç–∏–Ω–∫–∞ –ø–æ –∑–∞–ø—Ä–æ—Å—É <b>¬´${prompt}¬ª</b> –≥–æ—Ç–æ–≤–∞. üëá`
    );

    if (image.url) {
      await ctx.replyWithPhoto(image.url);

      await ctx.replyWithHTML(
        toText(
          `–í—ã —Ç–∞–∫–∂–µ –º–æ–∂–µ—Ç–µ <a href="${image.url}">—Å–∫–∞—á–∞—Ç—å –∫–∞—Ä—Ç–∏–Ω–∫—É</a> –≤ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–º –∫–∞—á–µ—Å—Ç–≤–µ.`,
          "‚ö† –í–Ω–∏–º–∞–Ω–∏–µ! –≠—Ç–∞ —Å—Å—ã–ª–∫–∞ –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å —Ç–æ–ª—å–∫–æ 60 –º–∏–Ω—É—Ç!"
        ),
        { 
          disable_web_page_preview: true 
        }
      );
    } else if (image.b64_json) {
      const stream = new PassThrough();
      stream.write(image.b64_json);
      stream.end();

      await ctx.replyWithPhoto({ source: stream });
    }

    await putMetric("ImageGenerated");

    return true;
  } else {
    let errorMessage = image.message;

    if (errorMessage.includes("Your prompt may contain text that is not allowed by our safety system.")) {
      errorMessage = "–í–∞—à –∑–∞–ø—Ä–æ—Å –±—ã–ª –æ—Ç–≤–µ—Ä–≥–Ω—É—Ç —Å–∏—Å—Ç–µ–º–æ–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ OpenAI. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ–≥–æ –ø–µ—Ä–µ—Ñ—Ä–∞–∑–∏—Ä–æ–≤–∞—Ç—å.";
    } else if (errorMessage.includes("This request has been blocked by our content filters.")) {
      errorMessage = "–í–∞—à –∑–∞–ø—Ä–æ—Å –±—ã–ª –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω —Ñ–∏–ª—å—Ç—Ä–∞–º–∏ OpenAI. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ–≥–æ –ø–µ—Ä–µ—Ñ—Ä–∞–∑–∏—Ä–æ–≤–∞—Ç—å.";
    } else if (errorMessage.includes("Image descriptions generated from your prompt may contain text that is not allowed by our safety system. If you believe this was done in error, your request may succeed if retried, or by adjusting your prompt.")) {
      errorMessage = "–í–∞—à –∑–∞–ø—Ä–æ—Å –±—ã–ª –æ—Ç–≤–µ—Ä–≥–Ω—É—Ç —Å–∏—Å—Ç–µ–º–æ–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ OpenAI. –ï—Å–ª–∏ –≤—ã —Å—á–∏—Ç–∞–µ—Ç–µ, —á—Ç–æ —ç—Ç–æ –æ—à–∏–±–∫–∞, –º–æ–∂–µ—Ç–µ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –∑–∞–ø—Ä–æ—Å. –ò–Ω–∞—á–µ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ–≥–æ –ø–µ—Ä–µ—Ñ—Ä–∞–∑–∏—Ä–æ–≤–∞—Ç—å.";
    }

    await replyWithKeyboard(
      ctx,
      inlineKeyboard(cancelButton),
      `‚ùå ${errorMessage}`
    );
  }

  return false;
}
