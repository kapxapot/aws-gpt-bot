import he from "he";
import { ts } from "../entities/at";
import { getCurrentHistory } from "../entities/context";
import { getModeName } from "../entities/prompt";
import { User } from "../entities/user";
import { gptChatCompletion } from "../external/gptChatCompletion";
import { isDebugMode, truncate } from "../lib/common";
import { isSuccess } from "../lib/error";
import { reply } from "../lib/telegram";
import { storeMessage } from "../storage/messageStorage";
import { addMessageToUser, gotGptAnswer, waitForGptAnswer } from "./userService";
import { commands } from "../lib/constants";
import { incMessageUsage, messageLimitExceeded } from "./planService";

export async function sendMessageToGpt(ctx: any, user: User, question: string, requestedAt?: number) {
  if (user.waitingForGptAnswer) {
    await reply(ctx, "–Ø –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –≤–∞—à–µ –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –ø–æ–¥–æ–∂–¥–∏—Ç–µ!");
    return;
  }

  if (await messageLimitExceeded(user)) {
    await reply(
      ctx,
      `–í—ã –ø—Ä–µ–≤—ã—Å–∏–ª–∏ –ª–∏–º–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–π –Ω–∞ —Å–µ–≥–æ–¥–Ω—è. üò•`,
      `–ü—Ä–∏—Ö–æ–¥–∏—Ç–µ –∑–∞–≤—Ç—Ä–∞ –∏–ª–∏ –ø–µ—Ä–µ–π–¥–∏—Ç–µ –Ω–∞ —Ç–∞—Ä–∏—Ñ —Å –±–æ–ª–µ–µ –≤—ã—Å–æ–∫–∏–º –ª–∏–º–∏—Ç–æ–º: /${commands.premium}`
    );

    return;
  }

  const messages = await reply(ctx, "üí¨ –î—É–º–∞—é –Ω–∞–¥ –æ—Ç–≤–µ—Ç–æ–º, –ø–æ–¥–æ–∂–¥–∏—Ç–µ...");

  await waitForGptAnswer(user);
  const answer = await gptChatCompletion(user, question);
  await gotGptAnswer(user);

  await ctx.deleteMessage(messages[0].message_id);

  const message = await storeMessage(
    user,
    question,
    answer,
    requestedAt ?? ts(),
    ts()
  );

  await addMessageToUser(user, message);

  if (isSuccess(answer)) {
    await reply(
      ctx,
      answer.reply
        ? `ü§ñ ${he.encode(answer.reply)}`
        : "–ù–µ—Ç –æ—Ç–≤–µ—Ç–∞ –æ—Ç ChatGPT. üò£"
    );

    await incMessageUsage(user);
  } else {
    let errorMessage = answer.message;

    if (errorMessage.includes("Please reduce the length of the messages.")) {
      errorMessage = "–í—ã –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ–≥–æ —Å–æ–∫—Ä–∞—Ç–∏—Ç—å.";
    } else if (errorMessage.includes("Rate limit reached")) {
      errorMessage = "–í—ã —à–ª–µ—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å–ª–∏—à–∫–æ–º —á–∞—Å—Ç–æ. –ü–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥.";
    } else if (errorMessage.includes("model is currently overloaded")) {
      errorMessage = "–û–π, —á—Ç–æ-—Ç–æ –º–Ω–µ –ø–æ–ø–ª–æ—Ö–µ–ª–æ... –°–ª–∏—à–∫–æ–º –±–æ–ª—å—à–∞—è –Ω–∞–≥—Ä—É–∑–∫–∞. –î–∞–π—Ç–µ –æ—Ç–¥—ã—à–∞—Ç—å—Å—è.";
    }

    await reply(ctx, `‚ùå ${errorMessage}`);
  }

  if (isDebugMode()) {
    showDebugInfo(
      ctx,
      user,
      isSuccess(answer) ? answer.usage : null
    );
  }
}

export async function showDebugInfo(ctx: any, user: User, usage: any) {
  const chunks = [];

  chunks.push(`üëâ —Ä–µ–∂–∏–º: <b>${getModeName(user)}</b>`);

  if (usage) {
    chunks.push(`—Ç–æ–∫–µ–Ω—ã: ${usage.totalTokens} (${usage.promptTokens} + ${usage.completionTokens})`);
  }

  const context = user.context;

  if (context) {
    const messages = getCurrentHistory(context).messages;

    if (messages.length) {
      chunks.push(`–∏—Å—Ç–æ—Ä–∏—è: ${messages.map(m => `[${truncate(m.request, 20)}]`).join(", ")}`)
    } else {
      chunks.push("–∏—Å—Ç–æ—Ä–∏—è –ø—É—Å—Ç–∞");
    }
  }

  if (user.usageStats) {
    chunks.push(`—Å–æ–æ–±—â–µ–Ω–∏–π —Å–µ–≥–æ–¥–Ω—è: ${user.usageStats.messageCount}`);
  }

  await reply(
    ctx,
    chunks.join(", ")
  );
}
