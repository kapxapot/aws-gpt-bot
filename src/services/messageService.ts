import { ts } from "../entities/at";
import { Context } from "../entities/context";
import { getPromptName } from "../entities/prompt";
import { User } from "../entities/user";
import { gptChatCompletion } from "../external/gptChatCompletion";
import { isDebugMode, truncate } from "../lib/common";
import { isError, isSuccess } from "../lib/error";
import { reply } from "../lib/telegram";
import { storeMessage } from "../storage/messageStorage";
import { addMessageToUser, getCurrentContext } from "./userService";

export async function sendMessageToGpt(ctx: any, user: User, question: string, requestedAt?: number) {
  const messages = await reply(ctx, "üí¨ –î—É–º–∞—é –Ω–∞–¥ –æ—Ç–≤–µ—Ç–æ–º, –ø–æ–¥–æ–∂–¥–∏—Ç–µ...");

  requestedAt = requestedAt ?? ts();

  const { prompt, latestMessages } = getCurrentContext(user);
  const answer = await gptChatCompletion(question, prompt, latestMessages);

  await ctx.deleteMessage(messages[0].message_id);

  const message = await storeMessage(
    user,
    question,
    answer,
    requestedAt,
    ts()
  );

  await addMessageToUser(user, message);

  if (isSuccess(answer)) {
    await reply(
      ctx,
      answer.reply ?? "–ù–µ—Ç –æ—Ç–≤–µ—Ç–∞ –æ—Ç ChatGPT. üò£"
    );
  } else {
    let errorMessage = answer.message;

    if (errorMessage.includes("Please reduce the length of the messages.")) {
      errorMessage = "–í—ã –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ–≥–æ —Å–æ–∫—Ä–∞—Ç–∏—Ç—å.";
    } else if (errorMessage.includes("Rate limit reached")) {
      errorMessage = "–í—ã —à–ª–µ—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å–ª–∏—à–∫–æ–º —á–∞—Å—Ç–æ. –ü–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥.";
    }

    await reply(ctx, `‚ùå ${errorMessage}`);
  }

  if (isDebugMode()) {
    showDebugInfo(
      ctx,
      user,
      isSuccess(answer) ? answer.usage : null
    );
  }
}

export async function showDebugInfo(ctx: any, user: User, usage: any) {
  const chunks = [];

  const context = user.context
    ? Context.fromInterface(user.context)
    : null;

  if (context) {
    chunks.push(`üü¢ –ø—Ä–æ–º—Ç: <b>${getPromptName(context.promptCode)}</b>`);
  }

  if (usage) {
    chunks.push(`—Ç–æ–∫–µ–Ω—ã: ${usage.totalTokens} (${usage.promptTokens} + ${usage.completionTokens})`);
  }

  if (context) {
    const messages = context.getCurrentHistory().messages;

    if (messages.length) {
      chunks.push(`–∏—Å—Ç–æ—Ä–∏—è: ${messages.map(m => `[${truncate(m.request, 20)}]`).join(", ")}`)
    } else {
      chunks.push("–∏—Å—Ç–æ—Ä–∏—è –ø—É—Å—Ç–∞");
    }
  }

  await reply(
    ctx,
    chunks.join(", ")
  );
}
